Change log

For 2.0.0

Converted configuration data structure to class (object) implementation.

Added DDE Class to facilitate DDE communication.  This will be of use to rig control
and logging programs.

Added Rig Controller class to act as a common interface to various physical rig
controller methods.  This allows the main program to interface with all supported
rig controllers using the same code.

Added class encapsulating physical rig control methods used by DX Lab CI-V Commander.
Commander is now read from rig and write to rig versus read only in previous versions.

Added class encapsulating physical rig control methods used by Ham Radio Deluxe (DDE Interface).
Removed DDE class for HRD and returned to DLL (TCP/IP) method.

Added class encapsulating physical rig control methods used by OmniRig.
So far, OmniRig is still read only.

Added validator class.  Validator class has methods to validate various items used by JT65-HF
such as callsigns, grids, frequencies and free text messages.

Added serial port class.  Serial port class encapsulates PTT via serial port.

Added spot class.  Spot class encapsulates all spotting functions.  This replaces former RBC
unit.  Kind of sad as rbc unit was the oldest remaining code in JT65-HF.  It came from the old
rbc.exe days, but, it's time was past.  Initial testing as of 23-May-11 looks good.  After about 1K
spots the code hasn't rejected any sequence it should not have.

Added class to deal with testing of sound devices.  This is used by the configuration
class to test/validate audio settings.

Modified audio I/O code to handle any combination of mono/stereo input/output.  Either I/O can be stereo
for both, mono for both or mono for one and stereo for other.

Restored ability to set bin size (segment size) of multiple decoder.  Options of 20, 50, 100 and 200 Hz.
It's interesting to note how many more decodes it's able to pull out with the smaller bin spacing.  I ran
one copy (1.0.7) with its 100 Hz fixed bin size and a copy of 2.0.0 with 20 Hz bins... I didn't start
2.0.0 until 1.0.7 had recorded about 175 spots... after 4 hours 2.0.0 had logged more spots than 1.0.7
even with the head start.  This was due to 2 factors.  About 5% of the gain was from corrections to the
callsign parser that rejected spots it shouldn't in 1.0.7 while the remainder was due to picking up more
spots with 2.0.0 in MANY frames with closely space signals.  In one frame I decoded 10 transmissions.  A
new record for me.  :)  I never noticed how much the decision to fix bin spacing at 100 Hz hurt the program
as I never had a waterfall filled with close spaced signals in W6 as I'm routinely seeing in W4 when band
open to EU.

Code to handle intefacing with KVASD has been rewritten from scratch.  I believe all cases of KVASD.DAT
being left beyond its proper life span have been corrected and its location on disk will not be subject
to random factors.  This *may* put to rest once and for all the issue of ghost decodes which came from
the improperly left over KVASD.DAT file.  Only time will tell on that one.

Moving to a new sample rate error handler.  The idea is to measure short, medium and long term SR error
in an attempt to ascertain if the SR error is (A) correctable or (B) not correctable and fatal to proper
operation.

Confirmed correction to callsign parser now allows working callsigns having format A##A where A is
leter A...Z and # is numeral 0..9.  This format of callsign is also now correctly spotted.

Confirmed new RB/PSKR code is properly handling suffix/prefix callsigns.

New interface to PSK Reporter is confirmed as working.  Corrected error in field name for reported
grid.  I had looked at an old (very) ADIF definiton and was, much as in the ADIF logging modulem, used
grid rather than gridsquare.  Corrected issue with sending time as 4 digits HHMM rather than HHMMSS.


New configuration system (guided configuration).  This takes user through all items of
importance in a step by step process with full validation of input values.  No more bad
callsigns or grids is the goal.



More on the class (or object) structures.

Rig Control:

The common class is rigobject.  Class rigobject provides all the data structures related
to rig control in a common interface.  The class uses the following rig control method
specific classes:  civobject for CI-V Commander (DX Labs), hrdobject for HRD,
omnirig object for OmniRig.  Now the main code only has to communicate with rigobject
using the same methods/variables regardless of actual rig control method used.  Rig control
also handles PTT be it via rig control or serial port.  In the case of serial port rig
control uses the serial class object to do the work.

Configuration:

The common class is cfgobject.  Class cfgobject holds all user configurable variables
during the program's run and all data contained in the structure is validated for full
conformance with JT65 protocol requirements.  No more bad calls/grids/QRGs.  Beyond
that the class is, at program start, assinged twice with the second acting as a
'shadow' copy allowing for an undo of changes to configuration.


